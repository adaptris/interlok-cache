ext {
  componentName = 'Interlok Cache/Apache Geode'
  componentDesc = 'Using Apache Geode as a cache provider within Interlok'
  jacksonVersion = '2.16.1'
}

dependencies {
  api ("org.apache.geode:geode-core:1.15.1") {
    exclude group: 'org.apache.shiro'
    exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
    exclude group: "log4j", module: "log4j"
    exclude group: "junit", module: "junit"
    // Multiple CVE vulnerabilities before 4.x
    exclude group: "org.jgroups", module: "jgroups"
    // Multiple CVE vulnerabilities before 5.3.14
    exclude group: "org.springframework", module: "spring-web"
  }
  implementation ("org.jgroups:jgroups:5.3.4.Final")
  implementation ("org.springframework:spring-web:5.3.27")
  api ("commons-beanutils:commons-beanutils:1.9.4")
  implementation ("org.apache.shiro:shiro-core:1.13.0") {
    exclude group: "log4j", module: "log4j"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
  }
  api ("commons-codec:commons-codec:1.16.1")
  // Dependency to platform/BOM
  api (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  api ("com.fasterxml.jackson.core:jackson-databind")
  api ("com.fasterxml.jackson.core:jackson-core")
  api ("com.fasterxml.jackson.core:jackson-annotations")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
    classifier = 'examples'
    from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

artifacts {
    archives javadocJar
    archives examplesJar
    archives sourcesJar
}

publishing {
  publications {
      mavenJava(MavenPublication) {
          from components.java

          artifact javadocJar { classifier "javadoc" }
          artifact examplesJar { classifier "examples" }
          artifact sourcesJar { classifier "sources" }
          pom.withXml {
            asNode().appendNode("name", componentName)
            asNode().appendNode("description", componentDesc)
            asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
            def properties = asNode().appendNode("properties")
            properties.appendNode("target", "3.9.0+")
            properties.appendNode("license", "false")
            properties.appendNode("tags", "cache,geode")
            properties.appendNode("readme", "https://github.com/adaptris/interlok-cache/raw/develop/README.md")
            properties.appendNode("repository", "https://github.com/adaptris/interlok-cache")
          }
      }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

javadoc.dependsOn offlinePackageList,umlJavadoc
