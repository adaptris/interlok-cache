ext {
  componentName='Interlok Cache/Apache Geode'
  componentDesc='Using Apache Geode as a cache provider within Interlok'
  jacksonVersion='2.12.3'
}

dependencies {
  compile ("org.apache.geode:geode-core:1.13.2") {
    exclude group: 'org.apache.shiro'
	exclude group: "org.apache.httpcomponents", module: "httpclient"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
  }
  compile ("commons-beanutils:commons-beanutils:1.9.4")
  compile ("org.apache.shiro:shiro-core:1.7.1")
  compile ("org.apache.httpcomponents:httpclient:4.5.13")
  compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
  compile ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
  compile ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
    classifier = 'examples'
    from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}

artifacts {
    archives javadocJar
    archives examplesJar
    archives sourcesJar
}

publishing {
  publications {
      mavenJava(MavenPublication) {
          from components.java

          artifact javadocJar { classifier "javadoc" }
          artifact examplesJar { classifier "examples" }
          artifact sourcesJar { classifier "sources" }
          pom.withXml {
            asNode().appendNode("name", componentName)
            asNode().appendNode("description", componentDesc)
            def properties = asNode().appendNode("properties")
            properties.appendNode("target", "3.9.0+")
            properties.appendNode("license", "false")
            properties.appendNode("tags", "cache,geode")
            properties.appendNode("readme", "https://github.com/adaptris/interlok-cache/raw/develop/README.md")
            properties.appendNode("repository", "https://github.com/adaptris/interlok-cache")
          }
      }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

javadoc.dependsOn offlinePackageList,umlJavadoc
